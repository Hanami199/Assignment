--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /usr/bin/cg_annotate --auto=yes outputs_valgrind/cachegrind_L2.out
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         524288 B, 64 B, 8-way associative
Command:          ./stencil_parallel -x 512 -y 512 -o 0 -v 0 -n 100
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ I1mr____________ ILmr___________ Dr__________________ D1mr______________ DLmr______________ Dw_________________ D1mw______________ DLmw______________ Bc_________________ Bcm_____________ Bi________________ Bim_____________ 

659,709,519 (100.0%) 188,932 (100.0%) 61,059 (100.0%) 164,867,720 (100.0%) 4,477,985 (100.0%) 3,558,172 (100.0%) 48,274,026 (100.0%) 3,607,187 (100.0%) 3,533,475 (100.0%) 52,610,259 (100.0%) 738,539 (100.0%) 1,914,426 (100.0%) 221,201 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir________________________ I1mr__________________ ILmr_________________ Dr________________________ D1mr____________________ DLmr____________________ Dw_______________________ D1mw____________________ DLmw____________________ Bc_______________________ Bcm___________________ Bi______________________ Bim___________________  file:function

< 525,601,342 (79.7%, 79.7%)      20  (0.0%,  0.0%)     20  (0.0%,  0.0%) 131,444,895 (79.7%, 79.7%) 3,369,072 (75.2%, 75.2%) 3,368,471 (94.7%, 94.7%) 26,270,333 (54.4%, 54.4%) 3,289,179 (91.2%, 91.2%) 3,288,828 (93.1%, 93.1%) 26,334,988 (50.1%, 50.1%)  52,177  (7.1%,  7.1%)         0  (0.0%,  0.0%)       0  (0.0%,  0.0%)  /u/ipauser/strabucco/Assignment/include/stencil_template_parallel.h:
  525,127,600 (79.6%)              5  (0.0%)             5  (0.0%)        131,180,000 (79.6%)        3,335,501 (74.5%)        3,334,956 (93.7%)        26,269,200 (54.4%)        3,289,177 (91.2%)        3,288,826 (93.1%)        26,267,200 (49.9%)         51,642  (7.0%)                0                      0                   update_plane._omp_fn.0

<  95,779,031 (14.5%, 94.2%) 123,283 (65.3%, 65.3%) 34,912 (57.2%, 57.2%)  22,789,936 (13.8%, 93.6%)   829,765 (18.5%, 93.8%)    82,963  (2.3%, 97.0%) 16,796,050 (34.8%, 89.2%)   207,258  (5.7%, 96.9%)   187,844  (5.3%, 98.4%) 21,263,263 (40.4%, 90.5%) 527,762 (71.5%, 78.5%) 1,685,899 (88.1%, 88.1%) 209,243 (94.6%, 94.6%)  ???:
   10,392,118  (1.6%)            685  (0.4%)           160  (0.3%)          2,155,714  (1.3%)          288,657  (6.4%)            4,285  (0.1%)                 0                        0                        0                 1,048,089  (2.0%)         98,209 (13.3%)                0                      0                   __strcmp_avx2
    6,902,811  (1.0%)          1,384  (0.7%)           108  (0.2%)              5,063  (0.0%)              261  (0.0%)               37  (0.0%)         6,799,850 (14.1%)          139,212  (3.9%)          132,581  (3.8%)         6,746,580 (12.8%)          1,667  (0.2%)                0                      0                   __memset_avx2_unaligned_erms
    6,786,928  (1.0%)         10,489  (5.6%)         1,695  (2.8%)          2,049,520  (1.2%)            1,022  (0.0%)              293  (0.0%)           853,457  (1.8%)              604  (0.0%)              207  (0.0%)         1,161,419  (2.2%)         23,258  (3.1%)           18,382  (1.0%)          1,881  (0.9%)           __vfscanf_internal
    5,491,141  (0.8%)          6,666  (3.5%)           869  (1.4%)            891,416  (0.5%)            7,333  (0.2%)            1,278  (0.0%)           588,067  (1.2%)           26,988  (0.7%)           23,133  (0.7%)           832,708  (1.6%)         32,518  (4.4%)                0                      0                   _int_malloc
    4,604,166  (0.7%)            282  (0.1%)            75  (0.1%)          1,899,004  (1.2%)           13,468  (0.3%)            2,026  (0.1%)            51,482  (0.1%)               12  (0.0%)                6  (0.0%)         1,273,913  (2.4%)         26,033  (3.5%)                0                      0                   getenv
    4,053,308  (0.6%)          1,970  (1.0%)           160  (0.3%)          1,057,335  (0.6%)           14,207  (0.3%)            9,167  (0.3%)           375,111  (0.8%)               91  (0.0%)               11  (0.0%)           711,857  (1.4%)          7,096  (1.0%)                0                      0                   _int_free
    3,942,731  (0.6%)            104  (0.1%)            95  (0.2%)          1,080,572  (0.7%)          296,565  (6.6%)            1,243  (0.0%)           396,639  (0.8%)              363  (0.0%)                0                 1,027,038  (2.0%)          5,070  (0.7%)           17,089  (0.9%)         13,673  (6.2%)           client_connect_to_shmem2_from_buffi
    3,203,694  (0.5%)          4,708  (2.5%)           914  (1.5%)            649,568  (0.4%)              741  (0.0%)              139  (0.0%)           641,137  (1.3%)            1,804  (0.1%)              603  (0.0%)           359,149  (0.7%)          8,487  (1.1%)           23,041  (1.2%)          2,395  (1.1%)           __printf_buffer
    3,122,858  (0.5%)          1,812  (1.0%)           221  (0.4%)            430,862  (0.3%)              403  (0.0%)              126  (0.0%)           199,829  (0.4%)               59  (0.0%)               19  (0.0%)           620,311  (1.2%)         31,134  (4.2%)                0                      0                   ____strtoul_l_internal
    2,745,692  (0.4%)            704  (0.4%)           112  (0.2%)            750,123  (0.5%)            2,523  (0.1%)              512  (0.0%)           295,691  (0.6%)              135  (0.0%)               31  (0.0%)           569,050  (1.1%)         17,167  (2.3%)                0                      0                   malloc
    2,421,245  (0.4%)             14  (0.0%)            14  (0.0%)            548,172  (0.3%)                1  (0.0%)                1  (0.0%)           440,820  (0.9%)               45  (0.0%)               19  (0.0%)           358,656  (0.7%)         21,315  (2.9%)                0                      0                   __strspn_generic
    2,230,761  (0.3%)            643  (0.3%)           131  (0.2%)          1,212,144  (0.7%)           19,997  (0.4%)              659  (0.0%)         1,113,272  (2.3%)           18,983  (0.5%)           17,073  (0.5%)         1,221,787  (2.3%)         47,739  (6.5%)                0                      0                   __memcpy_avx_unaligned_erms
    2,110,721  (0.3%)         18,637  (9.9%)         6,172 (10.1%)          1,522,019  (0.9%)           15,548  (0.3%)            5,939  (0.2%)             2,310  (0.0%)                3  (0.0%)                2  (0.0%)               141  (0.0%)             54  (0.0%)        1,520,623 (79.4%)        157,628 (71.3%)           ???
    1,937,867  (0.3%)            602  (0.3%)            76  (0.1%)            610,173  (0.4%)            9,628  (0.2%)            5,824  (0.2%)           335,084  (0.7%)               46  (0.0%)                4  (0.0%)           243,957  (0.5%)          5,204  (0.7%)                0                      0                   free
    1,857,652  (0.3%)            548  (0.3%)            67  (0.1%)            520,008  (0.3%)                0                        0                   365,572  (0.8%)              293  (0.0%)              108  (0.0%)           195,630  (0.4%)          3,878  (0.5%)                0                      0                   __printf_buffer_write
    1,568,521  (0.2%)            672  (0.4%)           162  (0.3%)            283,543  (0.2%)            1,185  (0.0%)              336  (0.0%)                 0                        0                        0                   258,963  (0.5%)         13,971  (1.9%)                0                      0                   __strncmp_avx2
    1,523,428  (0.2%)            332  (0.2%)            63  (0.1%)            399,841  (0.2%)                0                        0                   244,428  (0.5%)                0                        0                   240,638  (0.5%)            354  (0.0%)                0                      0                   fgets
    1,499,101  (0.2%)            289  (0.2%)           113  (0.2%)            311,575  (0.2%)           36,887  (0.8%)           10,585  (0.3%)           272,324  (0.6%)              559  (0.0%)              159  (0.0%)           203,140  (0.4%)         12,006  (1.6%)                0                      0                   malloc_consolidate
    1,374,470  (0.2%)            340  (0.2%)            63  (0.1%)            317,132  (0.2%)                0                        0                   291,007  (0.6%)                4  (0.0%)                1  (0.0%)           131,846  (0.3%)          1,471  (0.2%)                0                      0                   _IO_getline_info
    1,298,422  (0.2%)              3  (0.0%)             3  (0.0%)            236,293  (0.1%)                0                        0                   118,149  (0.2%)                0                        0                   236,288  (0.4%)          1,194  (0.2%)                0                      0                   opal_common_ucx_mca_pmix_fence
    1,175,353  (0.2%)          1,424  (0.8%)            83  (0.1%)            191,279  (0.1%)           22,934  (0.5%)            5,841  (0.2%)                 0                        0                        0                   164,645  (0.3%)         10,865  (1.5%)                0                      0                   __strlen_avx2
      981,477  (0.1%)             94  (0.0%)            53  (0.1%)            340,660  (0.2%)               21  (0.0%)                2  (0.0%)           157,235  (0.3%)               16  (0.0%)                6  (0.0%)           138,967  (0.3%)          4,090  (0.6%)           26,200  (1.4%)              3  (0.0%)           pmix41_bfrops_base_unpack_general_int
      961,773  (0.1%)            174  (0.1%)            81  (0.1%)            153,107  (0.1%)               79  (0.0%)               39  (0.0%)                 0                        0                        0                   162,452  (0.3%)          7,162  (1.0%)                0                      0                   __strspn_sse42
      916,347  (0.1%)             87  (0.0%)            50  (0.1%)             92,428  (0.1%)              227  (0.0%)                0                    78,600  (0.2%)                2  (0.0%)                1  (0.0%)            88,013  (0.2%)            764  (0.1%)           13,100  (0.7%)          7,394  (3.3%)           flex128_decode_int
      750,153  (0.1%)             70  (0.0%)            33  (0.1%)            100,449  (0.1%)                7  (0.0%)                2  (0.0%)            49,345  (0.1%)                0                        0                   194,614  (0.4%)          4,404  (0.6%)                0                      0                   pmix_bfrops_base_tma_argv_split_inter.constprop.0
      708,730  (0.1%)            335  (0.2%)            34  (0.1%)            302,172  (0.2%)           17,313  (0.4%)            2,063  (0.1%)            99,663  (0.2%)                0                        0                   139,648  (0.3%)          4,655  (0.6%)                0                      0                   unlink_chunk.isra.0
      671,929  (0.1%)            309  (0.2%)            74  (0.1%)             70,760  (0.0%)              900  (0.0%)              389  (0.0%)                 0                        0                        0                    70,752  (0.1%)            497  (0.1%)                0                      0                   __strchrnul_avx2

<   6,414,974  (1.0%, 95.2%)   1,501  (0.8%, 66.1%)    479  (0.8%, 58.0%)   1,982,917  (1.2%, 94.8%)    80,899  (1.8%, 95.6%)    10,902  (0.3%, 97.3%)    699,991  (1.5%, 90.7%)     1,591  (0.0%, 97.0%)       341  (0.0%, 98.4%)  1,037,132  (2.0%, 92.4%)  35,948  (4.9%, 83.4%)         0  (0.0%, 88.1%)       0  (0.0%, 94.6%)  /usr/src/debug/glibc-2.40-24.fc41.x86_64/elf/dl-lookup.c:
    4,939,557  (0.7%)            775  (0.4%)           238  (0.4%)          1,557,051  (0.9%)           72,641  (1.6%)            8,107  (0.2%)           421,790  (0.9%)              557  (0.0%)              122  (0.0%)           876,491  (1.7%)         30,306  (4.1%)                0                      0                   do_lookup_x
      960,727  (0.1%)            440  (0.2%)           146  (0.2%)            281,343  (0.2%)              960  (0.0%)              109  (0.0%)           218,902  (0.5%)              764  (0.0%)              157  (0.0%)           101,218  (0.2%)          2,142  (0.3%)                0                      0                   _dl_lookup_symbol_x

<   3,124,504  (0.5%, 95.6%)     101  (0.1%, 66.1%)     47  (0.1%, 58.1%)   1,426,326  (0.9%, 95.6%)        80  (0.0%, 95.6%)        40  (0.0%, 97.3%)        123  (0.0%, 90.7%)        13  (0.0%, 97.0%)         8  (0.0%, 98.4%)    236,407  (0.4%, 92.9%)      64  (0.0%, 83.4%)         0  (0.0%, 88.1%)       0  (0.0%, 94.6%)  /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/mlx5/ib_mlx5.inl:
    2,835,672  (0.4%)             25  (0.0%)            11  (0.0%)          1,417,836  (0.9%)               35  (0.0%)               18  (0.0%)                 0                        0                        0                   236,306  (0.4%)             24  (0.0%)                0                      0                   uct_rc_mlx5_iface_progress_cyclic.lto_priv.0

<   2,248,591  (0.3%, 96.0%)     142  (0.1%, 66.2%)    115  (0.2%, 58.3%)     946,195  (0.6%, 96.2%)       108  (0.0%, 95.6%)        52  (0.0%, 97.3%)    709,773  (1.5%, 92.1%)        24  (0.0%, 97.0%)        11  (0.0%, 98.4%)        209  (0.0%, 92.9%)      56  (0.0%, 83.4%)         0  (0.0%, 88.1%)       0  (0.0%, 94.6%)  /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/rc/accel/rc_mlx5_iface.c:
    2,244,907  (0.3%)             17  (0.0%)             6  (0.0%)            945,224  (0.6%)                0                        0                   708,918  (1.5%)                1  (0.0%)                0                         0                      0                        0                      0                   uct_rc_mlx5_iface_progress_cyclic.lto_priv.0

<   2,034,272  (0.3%, 96.3%)     977  (0.5%, 66.7%)    445  (0.7%, 59.0%)     716,688  (0.4%, 96.6%)       939  (0.0%, 95.6%)       458  (0.0%, 97.3%)    475,624  (1.0%, 93.1%)        88  (0.0%, 97.0%)        29  (0.0%, 98.4%)      4,410  (0.0%, 92.9%)     623  (0.1%, 83.5%)        10  (0.0%, 88.1%)       3  (0.0%, 94.6%)  /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucp/core/ucp_worker.c:
    2,008,584  (0.3%)             11  (0.0%)             5  (0.0%)            708,912  (0.4%)                7  (0.0%)                1  (0.0%)           472,608  (1.0%)                0                        0                         0                      0                        0                      0                   ucp_worker_progress

<   1,536,009  (0.2%, 96.5%)       9  (0.0%, 66.7%)      3  (0.0%, 59.0%)     354,466  (0.2%, 96.8%)         9  (0.0%, 95.6%)         4  (0.0%, 97.3%)    118,157  (0.2%, 93.4%)         0  (0.0%, 97.0%)         0  (0.0%, 98.4%)    236,309  (0.4%, 93.4%)      15  (0.0%, 83.5%)   118,157  (6.2%, 94.2%)      11  (0.0%, 94.6%)  /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucs/datastruct/callbackq.h:ucp_worker_progress

<   1,187,500  (0.2%, 96.7%)     134  (0.1%, 66.8%)     36  (0.1%, 59.1%)     196,482  (0.1%, 97.0%)     8,434  (0.2%, 95.8%)     4,565  (0.1%, 97.5%)          0  (0.0%, 93.4%)         0  (0.0%, 97.0%)         0  (0.0%, 98.4%)    196,482  (0.4%, 93.7%)   9,730  (1.3%, 84.8%)         0  (0.0%, 94.2%)       0  (0.0%, 94.6%)  /usr/src/debug/glibc-2.40-24.fc41.x86_64/elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x

<   1,108,445  (0.2%, 96.9%)     105  (0.1%, 66.8%)     29  (0.0%, 59.1%)     180,514  (0.1%, 97.1%)        40  (0.0%, 95.8%)         5  (0.0%, 97.5%)    199,384  (0.4%, 93.8%)        15  (0.0%, 97.0%)         4  (0.0%, 98.4%)    198,920  (0.4%, 94.1%)  10,859  (1.5%, 86.3%)         0  (0.0%, 94.2%)       0  (0.0%, 94.6%)  /u/builder/builder/.jenkins/workspace/Builder/hwloc/build/hwloc/hwloc/topology-xml-nolibxml.c:
      994,437  (0.2%)              7  (0.0%)             7  (0.0%)            148,492  (0.1%)                0                        0                   170,071  (0.4%)                6  (0.0%)                2  (0.0%)           186,225  (0.4%)          9,351  (1.3%)                0                      0                   hwloc__nolibxml_import_next_attr

<     827,078  (0.1%, 97.0%)      11  (0.0%, 66.8%)      5  (0.0%, 59.1%)     236,308  (0.1%, 97.2%)        16  (0.0%, 95.8%)         6  (0.0%, 97.5%)    118,154  (0.2%, 94.0%)         0  (0.0%, 97.0%)         0  (0.0%, 98.4%)    118,154  (0.2%, 94.3%)       2  (0.0%, 86.3%)         0  (0.0%, 94.2%)       0  (0.0%, 94.6%)  /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/rc/accel/rc_mlx5.inl:
      827,071  (0.1%)              9  (0.0%)             3  (0.0%)            236,306  (0.1%)               16  (0.0%)                6  (0.0%)           118,153  (0.2%)                0                        0                   118,153  (0.2%)              2  (0.0%)                0                      0                   uct_rc_mlx5_iface_progress_cyclic.lto_priv.0

<     772,405  (0.1%, 97.1%)     374  (0.2%, 67.0%)     92  (0.2%, 59.3%)     154,490  (0.1%, 97.3%)       100  (0.0%, 95.8%)        34  (0.0%, 97.5%)    100,062  (0.2%, 94.2%)        32  (0.0%, 97.0%)        11  (0.0%, 98.4%)     54,487  (0.1%, 94.4%)      52  (0.0%, 86.3%)     9,065  (0.5%, 94.7%)      13  (0.0%, 94.6%)  /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucs/sys/event_set.c:
      770,573  (0.1%)            298  (0.2%)            56  (0.1%)            154,117  (0.1%)               77  (0.0%)               22  (0.0%)            99,725  (0.2%)               29  (0.0%)                8  (0.0%)            54,395  (0.1%)             39  (0.0%)            9,065  (0.5%)             13  (0.0%)           ucs_event_set_wait

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir________________________ I1mr________________ ILmr________________ Dr________________________ D1mr____________________ DLmr____________________ Dw_______________________ D1mw____________________ DLmw____________________ Bc_______________________ Bcm__________________ Bi______________________ Bim___________________  function:file

> 525,127,600 (79.6%, 79.6%)      5 (0.0%,  0.0%)     5  (0.0%,  0.0%) 131,180,000 (79.6%, 79.6%) 3,335,501 (74.5%, 74.5%) 3,334,956 (93.7%, 93.7%) 26,269,200 (54.4%, 54.4%) 3,289,177 (91.2%, 91.2%) 3,288,826 (93.1%, 93.1%) 26,267,200 (49.9%, 49.9%) 51,642  (7.0%,  7.0%)         0  (0.0%,  0.0%)       0  (0.0%,  0.0%)  update_plane._omp_fn.0:/u/ipauser/strabucco/Assignment/include/stencil_template_parallel.h

>  10,392,118  (1.6%, 81.2%)    685 (0.4%,  0.4%)   160  (0.3%,  0.3%)   2,155,714  (1.3%, 80.9%)   288,657  (6.4%, 80.9%)     4,285  (0.1%, 93.8%)          0  (0.0%, 54.4%)         0  (0.0%, 91.2%)         0  (0.0%, 93.1%)  1,048,089  (2.0%, 51.9%) 98,209 (13.3%, 20.3%)         0  (0.0%,  0.0%)       0  (0.0%,  0.0%)  __strcmp_avx2:???

>   6,902,811  (1.0%, 82.2%)  1,384 (0.7%,  1.1%)   108  (0.2%,  0.4%)       5,063  (0.0%, 80.9%)       261  (0.0%, 80.9%)        37  (0.0%, 93.8%)  6,799,850 (14.1%, 68.5%)   139,212  (3.9%, 95.0%)   132,581  (3.8%, 96.8%)  6,746,580 (12.8%, 64.7%)  1,667  (0.2%, 20.5%)         0  (0.0%,  0.0%)       0  (0.0%,  0.0%)  __memset_avx2_unaligned_erms:???

>   6,786,928  (1.0%, 83.3%) 10,489 (5.6%,  6.6%) 1,695  (2.8%,  3.2%)   2,049,520  (1.2%, 82.1%)     1,022  (0.0%, 81.0%)       293  (0.0%, 93.9%)    853,457  (1.8%, 70.3%)       604  (0.0%, 95.1%)       207  (0.0%, 96.8%)  1,161,419  (2.2%, 67.0%) 23,258  (3.1%, 23.7%)    18,382  (1.0%,  1.0%)   1,881  (0.9%,  0.9%)  __vfscanf_internal:???

>   5,907,650  (0.9%, 84.1%)     51 (0.0%,  6.7%)    20  (0.0%,  3.3%)   2,599,366  (1.6%, 83.7%)        51  (0.0%, 81.0%)        24  (0.0%, 93.9%)    827,071  (1.7%, 72.0%)         1  (0.0%, 95.1%)         0  (0.0%, 96.8%)    354,459  (0.7%, 67.6%)     26  (0.0%, 23.7%)         0  (0.0%,  1.0%)       0  (0.0%,  0.9%)  uct_rc_mlx5_iface_progress_cyclic.lto_priv.0:
    2,835,672  (0.4%)            25 (0.0%)           11  (0.0%)          1,417,836  (0.9%)               35  (0.0%)               18  (0.0%)                 0                        0                        0                   236,306  (0.4%)            24  (0.0%)                0                      0                   /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/mlx5/ib_mlx5.inl
    2,244,907  (0.3%)            17 (0.0%)            6  (0.0%)            945,224  (0.6%)                0                        0                   708,918  (1.5%)                1  (0.0%)                0                         0                     0                        0                      0                   /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/rc/accel/rc_mlx5_iface.c
      827,071  (0.1%)             9 (0.0%)            3  (0.0%)            236,306  (0.1%)               16  (0.0%)                6  (0.0%)           118,153  (0.2%)                0                        0                   118,153  (0.2%)             2  (0.0%)                0                      0                   /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/rc/accel/rc_mlx5.inl

>   5,491,141  (0.8%, 85.0%)  6,666 (3.5%, 10.2%)   869  (1.4%,  4.7%)     891,416  (0.5%, 84.2%)     7,333  (0.2%, 81.1%)     1,278  (0.0%, 93.9%)    588,067  (1.2%, 73.2%)    26,988  (0.7%, 95.8%)    23,133  (0.7%, 97.5%)    832,708  (1.6%, 69.2%) 32,518  (4.4%, 28.1%)         0  (0.0%,  1.0%)       0  (0.0%,  0.9%)  _int_malloc:???

>   5,022,286  (0.8%, 85.7%)    872 (0.5%, 10.7%)   255  (0.4%,  5.1%)   1,576,378  (1.0%, 85.2%)    72,641  (1.6%, 82.7%)     8,107  (0.2%, 94.1%)    432,302  (0.9%, 74.1%)       557  (0.0%, 95.8%)       122  (0.0%, 97.5%)    885,306  (1.7%, 70.9%) 30,328  (4.1%, 32.2%)         0  (0.0%,  1.0%)       0  (0.0%,  0.9%)  do_lookup_x:
    4,939,557  (0.7%)           775 (0.4%)          238  (0.4%)          1,557,051  (0.9%)           72,641  (1.6%)            8,107  (0.2%)           421,790  (0.9%)              557  (0.0%)              122  (0.0%)           876,491  (1.7%)        30,306  (4.1%)                0                      0                   /usr/src/debug/glibc-2.40-24.fc41.x86_64/elf/dl-lookup.c

>   4,604,166  (0.7%, 86.4%)    282 (0.1%, 10.8%)    75  (0.1%,  5.2%)   1,899,004  (1.2%, 86.3%)    13,468  (0.3%, 83.0%)     2,026  (0.1%, 94.2%)     51,482  (0.1%, 74.2%)        12  (0.0%, 95.8%)         6  (0.0%, 97.5%)  1,273,913  (2.4%, 73.3%) 26,033  (3.5%, 35.7%)         0  (0.0%,  1.0%)       0  (0.0%,  0.9%)  getenv:???

>   4,135,351  (0.6%, 87.1%)     20 (0.0%, 10.8%)     8  (0.0%,  5.2%)   1,299,680  (0.8%, 87.1%)        18  (0.0%, 83.0%)         6  (0.0%, 94.2%)    590,767  (1.2%, 75.4%)         0  (0.0%, 95.8%)         0  (0.0%, 97.5%)    472,611  (0.9%, 74.2%)     25  (0.0%, 35.7%)   118,157  (6.2%,  7.1%)      11  (0.0%,  0.9%)  ucp_worker_progress:
    2,008,584  (0.3%)            11 (0.0%)            5  (0.0%)            708,912  (0.4%)                7  (0.0%)                1  (0.0%)           472,608  (1.0%)                0                        0                         0                     0                        0                      0                   /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucp/core/ucp_worker.c
    1,536,009  (0.2%)             9 (0.0%)            3  (0.0%)            354,466  (0.2%)                9  (0.0%)                4  (0.0%)           118,157  (0.2%)                0                        0                   236,309  (0.4%)            15  (0.0%)          118,157  (6.2%)             11  (0.0%)           /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucs/datastruct/callbackq.h

>   4,053,308  (0.6%, 87.7%)  1,970 (1.0%, 11.9%)   160  (0.3%,  5.5%)   1,057,335  (0.6%, 87.8%)    14,207  (0.3%, 83.4%)     9,167  (0.3%, 94.4%)    375,111  (0.8%, 76.2%)        91  (0.0%, 95.8%)        11  (0.0%, 97.5%)    711,857  (1.4%, 75.6%)  7,096  (1.0%, 36.7%)         0  (0.0%,  7.1%)       0  (0.0%,  0.9%)  _int_free:???

>   3,942,731  (0.6%, 88.3%)    104 (0.1%, 11.9%)    95  (0.2%,  5.7%)   1,080,572  (0.7%, 88.4%)   296,565  (6.6%, 90.0%)     1,243  (0.0%, 94.5%)    396,639  (0.8%, 77.0%)       363  (0.0%, 95.8%)         0  (0.0%, 97.5%)  1,027,038  (2.0%, 77.5%)  5,070  (0.7%, 37.4%)    17,089  (0.9%,  8.0%)  13,673  (6.2%,  7.0%)  client_connect_to_shmem2_from_buffi:???

>   3,203,694  (0.5%, 88.8%)  4,708 (2.5%, 14.4%)   914  (1.5%,  7.1%)     649,568  (0.4%, 88.8%)       741  (0.0%, 90.0%)       139  (0.0%, 94.5%)    641,137  (1.3%, 78.4%)     1,804  (0.1%, 95.9%)       603  (0.0%, 97.5%)    359,149  (0.7%, 78.2%)  8,487  (1.1%, 38.5%)    23,041  (1.2%,  9.2%)   2,395  (1.1%,  8.1%)  __printf_buffer:???

>   3,122,858  (0.5%, 89.2%)  1,812 (1.0%, 15.4%)   221  (0.4%,  7.5%)     430,862  (0.3%, 89.1%)       403  (0.0%, 90.0%)       126  (0.0%, 94.5%)    199,829  (0.4%, 78.8%)        59  (0.0%, 95.9%)        19  (0.0%, 97.5%)    620,311  (1.2%, 79.4%) 31,134  (4.2%, 42.7%)         0  (0.0%,  9.2%)       0  (0.0%,  8.1%)  ____strtoul_l_internal:???

>   2,745,692  (0.4%, 89.7%)    704 (0.4%, 15.7%)   112  (0.2%,  7.7%)     750,123  (0.5%, 89.5%)     2,523  (0.1%, 90.1%)       512  (0.0%, 94.5%)    295,691  (0.6%, 79.4%)       135  (0.0%, 95.9%)        31  (0.0%, 97.5%)    569,050  (1.1%, 80.5%) 17,167  (2.3%, 45.0%)         0  (0.0%,  9.2%)       0  (0.0%,  8.1%)  malloc:???

>   2,421,245  (0.4%, 90.0%)     14 (0.0%, 15.8%)    14  (0.0%,  7.7%)     548,172  (0.3%, 89.9%)         1  (0.0%, 90.1%)         1  (0.0%, 94.5%)    440,820  (0.9%, 80.3%)        45  (0.0%, 95.9%)        19  (0.0%, 97.5%)    358,656  (0.7%, 81.1%) 21,315  (2.9%, 47.9%)         0  (0.0%,  9.2%)       0  (0.0%,  8.1%)  __strspn_generic:???

>   2,230,761  (0.3%, 90.4%)    643 (0.3%, 16.1%)   131  (0.2%,  7.9%)   1,212,144  (0.7%, 90.6%)    19,997  (0.4%, 90.5%)       659  (0.0%, 94.5%)  1,113,272  (2.3%, 82.6%)    18,983  (0.5%, 96.4%)    17,073  (0.5%, 98.0%)  1,221,787  (2.3%, 83.5%) 47,739  (6.5%, 54.4%)         0  (0.0%,  9.2%)       0  (0.0%,  8.1%)  __memcpy_avx_unaligned_erms:???

>   2,148,227  (0.3%, 90.7%)    574 (0.3%, 16.4%)   182  (0.3%,  8.2%)     477,825  (0.3%, 90.9%)     9,394  (0.2%, 90.7%)     4,674  (0.1%, 94.6%)    218,902  (0.5%, 83.1%)       764  (0.0%, 96.4%)       157  (0.0%, 98.0%)    297,700  (0.6%, 84.0%) 11,872  (1.6%, 56.0%)         0  (0.0%,  9.2%)       0  (0.0%,  8.1%)  _dl_lookup_symbol_x:
    1,187,500  (0.2%)           134 (0.1%)           36  (0.1%)            196,482  (0.1%)            8,434  (0.2%)            4,565  (0.1%)                 0                        0                        0                   196,482  (0.4%)         9,730  (1.3%)                0                      0                   /usr/src/debug/glibc-2.40-24.fc41.x86_64/elf/../sysdeps/generic/dl-new-hash.h
      960,727  (0.1%)           440 (0.2%)          146  (0.2%)            281,343  (0.2%)              960  (0.0%)              109  (0.0%)           218,902  (0.5%)              764  (0.0%)              157  (0.0%)           101,218  (0.2%)         2,142  (0.3%)                0                      0                   /usr/src/debug/glibc-2.40-24.fc41.x86_64/elf/dl-lookup.c

>   2,110,721  (0.3%, 91.0%) 18,637 (9.9%, 26.3%) 6,172 (10.1%, 18.3%)   1,522,019  (0.9%, 91.8%)    15,548  (0.3%, 91.1%)     5,939  (0.2%, 94.8%)      2,310  (0.0%, 83.1%)         3  (0.0%, 96.4%)         2  (0.0%, 98.0%)        141  (0.0%, 84.0%)     54  (0.0%, 56.0%) 1,520,623 (79.4%, 88.7%) 157,628 (71.3%, 79.4%)  ???:???

>   1,937,867  (0.3%, 91.3%)    602 (0.3%, 26.6%)    76  (0.1%, 18.5%)     610,173  (0.4%, 92.2%)     9,628  (0.2%, 91.3%)     5,824  (0.2%, 95.0%)    335,084  (0.7%, 83.8%)        46  (0.0%, 96.4%)         4  (0.0%, 98.0%)    243,957  (0.5%, 84.5%)  5,204  (0.7%, 56.7%)         0  (0.0%, 88.7%)       0  (0.0%, 79.4%)  free:???

>   1,857,652  (0.3%, 91.6%)    548 (0.3%, 26.9%)    67  (0.1%, 18.6%)     520,008  (0.3%, 92.5%)         0  (0.0%, 91.3%)         0  (0.0%, 95.0%)    365,572  (0.8%, 84.5%)       293  (0.0%, 96.5%)       108  (0.0%, 98.0%)    195,630  (0.4%, 84.9%)  3,878  (0.5%, 57.2%)         0  (0.0%, 88.7%)       0  (0.0%, 79.4%)  __printf_buffer_write:???

>   1,568,521  (0.2%, 91.8%)    672 (0.4%, 27.2%)   162  (0.3%, 18.8%)     283,543  (0.2%, 92.7%)     1,185  (0.0%, 91.3%)       336  (0.0%, 95.0%)          0  (0.0%, 84.5%)         0  (0.0%, 96.5%)         0  (0.0%, 98.0%)    258,963  (0.5%, 85.4%) 13,971  (1.9%, 59.1%)         0  (0.0%, 88.7%)       0  (0.0%, 79.4%)  __strncmp_avx2:???

>   1,523,428  (0.2%, 92.0%)    332 (0.2%, 27.4%)    63  (0.1%, 18.9%)     399,841  (0.2%, 92.9%)         0  (0.0%, 91.3%)         0  (0.0%, 95.0%)    244,428  (0.5%, 85.0%)         0  (0.0%, 96.5%)         0  (0.0%, 98.0%)    240,638  (0.5%, 85.8%)    354  (0.0%, 59.2%)         0  (0.0%, 88.7%)       0  (0.0%, 79.4%)  fgets:???

>   1,499,101  (0.2%, 92.3%)    289 (0.2%, 27.6%)   113  (0.2%, 19.1%)     311,575  (0.2%, 93.1%)    36,887  (0.8%, 92.1%)    10,585  (0.3%, 95.3%)    272,324  (0.6%, 85.6%)       559  (0.0%, 96.5%)       159  (0.0%, 98.0%)    203,140  (0.4%, 86.2%) 12,006  (1.6%, 60.8%)         0  (0.0%, 88.7%)       0  (0.0%, 79.4%)  malloc_consolidate:???

>   1,374,470  (0.2%, 92.5%)    340 (0.2%, 27.7%)    63  (0.1%, 19.2%)     317,132  (0.2%, 93.3%)         0  (0.0%, 92.1%)         0  (0.0%, 95.3%)    291,007  (0.6%, 86.2%)         4  (0.0%, 96.5%)         1  (0.0%, 98.0%)    131,846  (0.3%, 86.5%)  1,471  (0.2%, 61.0%)         0  (0.0%, 88.7%)       0  (0.0%, 79.4%)  _IO_getline_info:???

>   1,298,422  (0.2%, 92.7%)      3 (0.0%, 27.7%)     3  (0.0%, 19.2%)     236,293  (0.1%, 93.4%)         0  (0.0%, 92.1%)         0  (0.0%, 95.3%)    118,149  (0.2%, 86.4%)         0  (0.0%, 96.5%)         0  (0.0%, 98.0%)    236,288  (0.4%, 86.9%)  1,194  (0.2%, 61.2%)         0  (0.0%, 88.7%)       0  (0.0%, 79.4%)  opal_common_ucx_mca_pmix_fence:???

>   1,175,353  (0.2%, 92.9%)  1,424 (0.8%, 28.5%)    83  (0.1%, 19.4%)     191,279  (0.1%, 93.6%)    22,934  (0.5%, 92.7%)     5,841  (0.2%, 95.4%)          0  (0.0%, 86.4%)         0  (0.0%, 96.5%)         0  (0.0%, 98.0%)    164,645  (0.3%, 87.2%) 10,865  (1.5%, 62.6%)         0  (0.0%, 88.7%)       0  (0.0%, 79.4%)  __strlen_avx2:???

>     994,437  (0.2%, 93.0%)      7 (0.0%, 28.5%)     7  (0.0%, 19.4%)     148,492  (0.1%, 93.7%)         0  (0.0%, 92.7%)         0  (0.0%, 95.4%)    170,071  (0.4%, 86.8%)         6  (0.0%, 96.5%)         2  (0.0%, 98.0%)    186,225  (0.4%, 87.6%)  9,351  (1.3%, 63.9%)         0  (0.0%, 88.7%)       0  (0.0%, 79.4%)  hwloc__nolibxml_import_next_attr:/u/builder/builder/.jenkins/workspace/Builder/hwloc/build/hwloc/hwloc/topology-xml-nolibxml.c

>     981,477  (0.1%, 93.2%)     94 (0.0%, 28.5%)    53  (0.1%, 19.5%)     340,660  (0.2%, 93.9%)        21  (0.0%, 92.7%)         2  (0.0%, 95.4%)    157,235  (0.3%, 87.1%)        16  (0.0%, 96.5%)         6  (0.0%, 98.0%)    138,967  (0.3%, 87.8%)  4,090  (0.6%, 64.5%)    26,200  (1.4%, 90.0%)       3  (0.0%, 79.4%)  pmix41_bfrops_base_unpack_general_int:???

>     961,773  (0.1%, 93.3%)    174 (0.1%, 28.6%)    81  (0.1%, 19.6%)     153,107  (0.1%, 94.0%)        79  (0.0%, 92.7%)        39  (0.0%, 95.4%)          0  (0.0%, 87.1%)         0  (0.0%, 96.5%)         0  (0.0%, 98.0%)    162,452  (0.3%, 88.1%)  7,162  (1.0%, 65.4%)         0  (0.0%, 90.0%)       0  (0.0%, 79.4%)  __strspn_sse42:???

>     916,347  (0.1%, 93.4%)     87 (0.0%, 28.7%)    50  (0.1%, 19.7%)      92,428  (0.1%, 94.0%)       227  (0.0%, 92.7%)         0  (0.0%, 95.4%)     78,600  (0.2%, 87.3%)         2  (0.0%, 96.5%)         1  (0.0%, 98.0%)     88,013  (0.2%, 88.3%)    764  (0.1%, 65.5%)    13,100  (0.7%, 90.7%)   7,394  (3.3%, 82.7%)  flex128_decode_int:???

>     770,573  (0.1%, 93.6%)    298 (0.2%, 28.8%)    56  (0.1%, 19.8%)     154,117  (0.1%, 94.1%)        77  (0.0%, 92.7%)        22  (0.0%, 95.4%)     99,725  (0.2%, 87.5%)        29  (0.0%, 96.5%)         8  (0.0%, 98.0%)     54,395  (0.1%, 88.4%)     39  (0.0%, 65.5%)     9,065  (0.5%, 91.2%)      13  (0.0%, 82.7%)  ucs_event_set_wait:/usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucs/sys/event_set.c

>     750,153  (0.1%, 93.7%)     70 (0.0%, 28.9%)    33  (0.1%, 19.8%)     100,449  (0.1%, 94.2%)         7  (0.0%, 92.7%)         2  (0.0%, 95.4%)     49,345  (0.1%, 87.6%)         0  (0.0%, 96.5%)         0  (0.0%, 98.0%)    194,614  (0.4%, 88.8%)  4,404  (0.6%, 66.1%)         0  (0.0%, 91.2%)       0  (0.0%, 82.7%)  pmix_bfrops_base_tma_argv_split_inter.constprop.0:???

>     708,730  (0.1%, 93.8%)    335 (0.2%, 29.1%)    34  (0.1%, 19.9%)     302,172  (0.2%, 94.3%)    17,313  (0.4%, 93.0%)     2,063  (0.1%, 95.5%)     99,663  (0.2%, 87.8%)         0  (0.0%, 96.5%)         0  (0.0%, 98.0%)    139,648  (0.3%, 89.0%)  4,655  (0.6%, 66.8%)         0  (0.0%, 91.2%)       0  (0.0%, 82.7%)  unlink_chunk.isra.0:???

>     671,929  (0.1%, 93.9%)    309 (0.2%, 29.2%)    74  (0.1%, 20.0%)      70,760  (0.0%, 94.4%)       900  (0.0%, 93.1%)       389  (0.0%, 95.5%)          0  (0.0%, 87.8%)         0  (0.0%, 96.5%)         0  (0.0%, 98.0%)     70,752  (0.1%, 89.2%)    497  (0.1%, 66.8%)         0  (0.0%, 91.2%)       0  (0.0%, 82.7%)  __strchrnul_avx2:???

--------------------------------------------------------------------------------
-- Annotated source file: /u/builder/builder/.jenkins/workspace/Builder/hwloc/build/hwloc/hwloc/topology-xml-nolibxml.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /u/builder/builder/.jenkins/workspace/Builder/hwloc/build/hwloc/hwloc/topology-xml-nolibxml.c

--------------------------------------------------------------------------------
-- Annotated source file: /u/ipauser/strabucco/Assignment/include/stencil_template_parallel.h
--------------------------------------------------------------------------------
Ir_________________ I1mr____ ILmr____ Dr_________________ D1mr_____________ DLmr_____________ Dw________________ D1mw_____________ DLmw_____________ Bc________________ Bcm__________ Bi Bim 

-- line 114 ----------------------------------------
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  inline int inject_energy( const int      periodic, // if the boundary is periodic
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                          const int      Nsources, // number of sources for the rank
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  			            const vec2_t  *Sources, // positions of those sources
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  			            const double   energy, // energy per source
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                          plane_t *plane, // plane on which to inject the energu
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                          const vec2_t   N) // process grid shape
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // plane->size[_x_]=nx (interior length), plane->size[_y_]=ny (interior height)
        600  (0.0%) 0        0                100  (0.0%)       100  (0.0%)        99  (0.0%)          0                 0                 0                  0              0         0   0      const uint register sizex = plane->size[_x_]+2; // interior + halos
        100  (0.0%) 0        0                100  (0.0%)         0                 0                  0                 0                 0                  0              0         0   0      double * restrict data = plane->data;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // used to ready from flattened data array
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      #define IDX( i, j ) ( (j)*sizex + (i) )
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // for every source of this rank
      2,200  (0.0%) 1 (0.0%) 1 (0.0%)         400  (0.0%)         0                 0                  0                 0                 0                600  (0.0%)      4 (0.0%)  0   0      for (int s = 0; s < Nsources; s++) {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              // extract the source position on the grid
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              int x = Sources[s][_x_];
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              int y = Sources[s][_y_];
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              // add energy at that point
      2,400  (0.0%) 0        0              1,200  (0.0%)       499  (0.0%)       470  (0.0%)        400  (0.0%)         0                 0                  0              0         0   0              data[ IDX(x,y) ] += energy;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              // if there is only one MPI rank along that axis, we need to wrap locally
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              if ( periodic ) {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                  if ( (N[_x_] == 1)  ) {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                      // propagate the boundaries if needed
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                      // check the serial version
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                      /* if N[_x_]==1, it means that we don't have a west or east neighbour
-- line 144 ----------------------------------------
-- line 183 ----------------------------------------
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  inline int update_plane ( const int periodic, // toggle for periodic-nonperiodic boundaries 
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                          const vec2_t N,         // the grid of MPI tasks
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                          const plane_t *oldplane, // plane to take values for stencil computation from
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                          plane_t *newplane // plane to write results of stencil computation
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                          ) 
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      uint register fxsize = oldplane->size[_x_]+2; // interior + halo
        300  (0.0%) 0        0                200  (0.0%)         0                 0                  0                 0                 0                  0              0         0   0      uint register fysize = oldplane->size[_y_]+2;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      uint register xsize = oldplane->size[_x_]; // just interior
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      uint register ysize = oldplane->size[_y_];
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      #define IDX( i, j ) ( (j)*fxsize + (i) ) // preprocessor macro to access flattened array
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // HINT: you may attempt to
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      //       (i)  manually unroll the loop
-- line 199 ----------------------------------------
-- line 200 ----------------------------------------
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      //       (ii) ask the compiler to do it
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // for instance
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // #pragma GCC unroll 4
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      //
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // HINT: in any case, this loop is a good candidate
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      //       for openmp parallelization
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      double * restrict old = oldplane->data; // we will read from this
        900  (0.0%) 4 (0.0%) 4 (0.0%)         200  (0.0%)         0                 0                100  (0.0%)         0                 0                  0              0         0   0      double * restrict new = newplane->data; // and write on this
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      
     19,600  (0.0%) 4 (0.0%) 4 (0.0%)       5,700  (0.0%)     1,042  (0.0%)     1,041  (0.0%)      3,700  (0.0%)       519  (0.0%)       519  (0.0%)      1,600  (0.0%)     15 (0.0%)  0   0      #pragma omp parallel for schedule(static)
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      for (uint j = 1; j <= ysize; j++) {
 78,952,000 (12.0%) 0        0             51,200  (0.0%)        50  (0.0%)        50  (0.0%)     51,600  (0.1%)         0                 0         26,265,600 (49.9%) 51,627 (7.0%)  0   0          for ( uint i = 1; i <= xsize; i++)
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              // NOTE: (i-1,j), (i+1,j), (i,j-1) and (i,j+1) always exist even
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              //       if this patch is at some border without periodic conditions;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              //       in that case it is assumed that the +-1 points are outside the
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              //       plate and always have a value of 0, i.e. they are an
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              //       "infinite sink" of heat
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              // five-points stencil formula
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              //
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              // HINT : check the serial version for some optimization
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              //
314,572,800 (47.7%) 2 (0.0%) 2 (0.0%) 104,857,600 (63.6%)    44,475  (1.0%)    44,011  (1.2%) 26,214,400 (54.3%) 3,288,658 (91.2%) 3,288,307 (93.1%)          0              0         0   0              new[ IDX(i,j) ] = old[ IDX(i,j) ] / 2.0 + ( old[IDX(i-1, j)] + old[IDX(i+1, j)] +
131,584,000 (19.9%) 0        0         26,265,600 (15.9%) 3,289,934 (73.5%) 3,289,854 (92.5%)          0                 0                 0                  0              0         0   0                                  old[IDX(i, j-1)] + old[IDX(i, j+1)] ) /4.0 / 2.0;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
        600  (0.0%) 0        0                400  (0.0%)       100  (0.0%)       100  (0.0%)          0                 0                 0                100  (0.0%)      0         0   0      if ( periodic ) {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          // we need to propagate only when we are alone row-wise or column-wise in the
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          // grid of processors
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          if ( N[_x_] == 1 ) {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              // propagate the boundaries as needed
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              // check the serial version
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              for (uint j = 1; j <= ysize; j++) {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                  new[ IDX(0,j) ] = new[ IDX(xsize,j) ]; // we propagate east edge on west halo
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                  new[ IDX(xsize+1,j) ] = new[ IDX(1,j) ]; // we propagate west edge on east halo
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          if ( N[_y_] == 1 ) {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                  // propagate the boundaries as needed
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                  // check the serial version
        198  (0.0%) 1 (0.0%) 1 (0.0%)           0                 0                 0                 99  (0.0%)         0                 0                  0              0         0   0              for (uint i = 1; i <= xsize; i++) {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                  new[ IDX(i, 0) ] = new[ IDX(i, ysize) ]; // propagate south edge on the north halo
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                  new[ IDX(i, ysize+1) ] = new[ IDX(i,1) ]; // propagate north edge on the south halo
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .              }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
-- line 254 ----------------------------------------
-- line 261 ----------------------------------------
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  inline int get_total_energy( plane_t *plane,
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .                               double  *energy )
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  /*
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .   * NOTE: this routine a good candiadate for openmp
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .   *       parallelization
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .   */
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  {
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          1  (0.0%) 0        0                  1  (0.0%)         0                 0                  0                 0                 0                  0              0         0   0      const int register xsize = plane->size[_x_];
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      const int register ysize = plane->size[_y_];
          4  (0.0%) 1 (0.0%) 1 (0.0%)           0                 0                 0                  2  (0.0%)         0                 0                  0              0         0   0      const int register fsize = xsize+2;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          2  (0.0%) 1 (0.0%) 1 (0.0%)           1  (0.0%)         0                 0                  0                 0                 0                  0              0         0   0      double * restrict data = plane->data;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      #define IDX( i, j ) ( (j)*fsize + (i) )
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      #if defined(LONG_ACCURACY)    
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          long double totenergy = 0;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      #else
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          double totenergy = 0;    
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      #endif
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // HINT: you may attempt to
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      //       (i)  manually unroll the loop
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      //       (ii) ask the compiler to do it
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // for instance
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      // #pragma GCC unroll 4
        152  (0.0%) 3 (0.0%) 3 (0.0%)          45  (0.0%)        11  (0.0%)        11  (0.0%)         23  (0.0%)         2  (0.0%)         2  (0.0%)          8  (0.0%)      2 (0.0%)  0   0      #pragma omp parallel for reduction(+:totenergy) schedule(static)
         40  (0.0%) 0        0                  4  (0.0%)         0                 0                  8  (0.0%)         0                 0                  4  (0.0%)      2 (0.0%)  0   0      for ( int j = 1; j <= ysize; j++ ) {
    137,764  (0.0%) 3 (0.0%) 3 (0.0%)           0                 0                 0                  0                 0                 0             67,076  (0.1%)    527 (0.1%)  0   0          for ( int i = 1; i <= xsize; i++ ) {
    327,680  (0.0%) 0        0            262,144  (0.2%)    32,861  (0.7%)    32,835  (0.9%)          0                 0                 0                  0              0         0   0              totenergy += data[ IDX(i, j) ];
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .          }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      #undef IDX
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          1  (0.0%) 0        0                  0                 0                 0                  1  (0.0%)         0                 0                  0              0         0   0      *energy = (double)totenergy;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .      return 0;
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  }
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  
          .         .        .                  .                 .                 .                  .                 .                 .                  .              .         .   .  

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc-2.40-24.fc41.x86_64/elf/../sysdeps/generic/dl-new-hash.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc-2.40-24.fc41.x86_64/elf/../sysdeps/generic/dl-new-hash.h

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc-2.40-24.fc41.x86_64/elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc-2.40-24.fc41.x86_64/elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucp/core/ucp_worker.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucp/core/ucp_worker.c

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucs/datastruct/callbackq.h
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucs/datastruct/callbackq.h

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucs/sys/event_set.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/ucs/sys/event_set.c

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/mlx5/ib_mlx5.inl
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/mlx5/ib_mlx5.inl

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/rc/accel/rc_mlx5.inl
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/rc/accel/rc_mlx5.inl

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/rc/accel/rc_mlx5_iface.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/ucx-1.17.0-3.fc41.x86_64/src/uct/ib/rc/accel/rc_mlx5_iface.c

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir_________________ I1mr___________ ILmr__________ Dr_________________ D1mr_____________ DLmr_____________ Dw________________ D1mw_____________ DLmw_____________ Bc________________ Bcm____________ Bi_______________ Bim____________ 

525,601,342 (79.7%)      20  (0.0%)     20  (0.0%) 131,444,895 (79.7%) 3,369,072 (75.2%) 3,368,471 (94.7%) 26,270,333 (54.4%) 3,289,179 (91.2%) 3,288,828 (93.1%) 26,334,988 (50.1%)  52,177  (7.1%)         0               0            annotated: files known & above threshold & readable, line numbers known
          0               0              0                   0                 0                 0                  0                 0                 0                  0               0                 0               0            annotated: files known & above threshold & readable, line numbers unknown
          0               0              0                   0                 0                 0                  0                 0                 0                  0               0                 0               0          unannotated: files known & above threshold & two or more non-identical
 19,253,778  (2.9%)   3,354  (1.8%)  1,251  (2.0%)   6,194,386  (3.8%)    90,625  (2.0%)    16,066  (0.5%)  2,421,268  (5.0%)     1,763  (0.0%)       404  (0.0%)  2,082,510  (4.0%)  57,349  (7.8%)   127,232  (6.6%)      27  (0.0%)  unannotated: files known & above threshold & unreadable 
 19,075,368  (2.9%)  62,275 (33.0%) 24,876 (40.7%)   4,438,503  (2.7%)   188,523  (4.2%)    90,672  (2.5%)  2,786,375  (5.8%)   108,987  (3.0%)    56,399  (1.6%)  2,929,498  (5.6%) 101,251 (13.7%)   101,295  (5.3%)  11,931  (5.4%)  unannotated: files known & below threshold
 95,779,031 (14.5%) 123,283 (65.3%) 34,912 (57.2%)  22,789,936 (13.8%)   829,765 (18.5%)    82,963  (2.3%) 16,796,050 (34.8%)   207,258  (5.7%)   187,844  (5.3%) 21,263,263 (40.4%) 527,762 (71.5%) 1,685,899 (88.1%) 209,243 (94.6%)  unannotated: files unknown

